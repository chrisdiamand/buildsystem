#!/usr/bin/env python

import os
import sys

builddir = "Build"

# A python module used to write Makefile rules for
# a particular target type e.g. Jars/C executables/etc.
class BuildTarget:
    def __init__(self, fname):
        # The name for a target of this type e.g. 'Jar'/'CProg'
        self.modulename = os.path.splitext(os.path.basename(fname))[0]
        # The python file containing the relevant classes
        self.fname = fname

        self.module_globals = {"builddir": builddir}
        # A helper function to write pattern rules
        self.write_rule = None
        # The class used by the 'project.py' script
        self.decl_class = None

        self.load()

    def load(self):
        execfile(self.fname, self.module_globals)
        self.write_rule = self.module_globals["write_rule"]
        self.decl_class = self.module_globals["Target"]


class Makefile:
    def __init__(self, jars):
        self.jars = jars

    def gen(self, outfile):
        outfile.write("# Autogenerated by " + sys.argv[0] + " - do not edit\n\n")
        outfile.write(".PHONY: all\n")
        outfile.write("all: everything\n\n")
        jartargets = " ".join([i.gen(outfile) for i in self.jars])

        # 'everything' target, now that we know all the jar files to build
        outfile.write(".PHONY: everything\n")
        outfile.write("everything: " + jartargets + "\n\n")

        LaTeX.write_rule(outfile)
        self.write_c_rule(outfile)

        # Make sure the build directory exists
        outfile.write(builddir + ":\n")
        outfile.write("\t@mkdir -p " + builddir + "\n\n")

        # make clean
        outfile.write(".PHONY: clean\n")
        outfile.write("clean:\n")
        outfile.write("\t@rm -Rf $(REMOVE_FILES) "
                      + builddir + "\n");

# Load the project definition from 'project.py'.
project_globals = {
    "CProg"     :   CProg,
    "LaTeX"     :   LaTeX,
    "Jar"       :   Jar,
    "Makefile"  :   Makefile,
    "Package"   :   Package }

try:
    execfile("project.py", project_globals)
except IOError as e:
    print "Error: " + e.strerror + ": '" + e.filename + "'"
    sys.exit(1)

makefile = project_globals["makefile"]

# Generate the Makefile.
outfile = open("Makefile", "w")
makefile.gen(outfile)
outfile.close()
